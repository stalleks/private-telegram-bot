from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

from . import model, callbackdata
from . import keyboard

router = Router()


class StatesUser(StatesGroup):
    admin = State()


def check_admin_from_message(func):
    async def wrapper(*args, **kwargs) -> None:
        message: Message = args[0]
        if model.check_admin(message.from_user.id):
            # TODO: –ø–µ—Ä–µ–¥–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            await func(*args, kwargs["state"])
        else:
            # TODO: —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω üö∑!")
    return wrapper


@router.message(Command("admin"))
@check_admin_from_message
async def command_admin_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(StatesUser.admin)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É, –ú–∞–≥–∏—Å—Ç—Ä", reply_markup=keyboard.menu)


@router.message(StatesUser.admin)
async def echo_handler(message: Message, state: FSMContext) -> None:
    if message.text == "–•–æ—á—É —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º":
        model.add_admin(message.from_user.id)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω")
    elif message.text == "–ù–µ —Ö–æ—á—É –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º":
        model.remove_admin(message.from_user.id)
        await message.answer("–í—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω")

    if message.text == keyboard.menu.keyboard[0][0].text:
        await message.answer(f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {model.count_users()}. "
                             f"\n–í—ã–±–µ—Ä–µ—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                             reply_markup=keyboard.list_users(0))
    elif message.text == keyboard.menu.keyboard[0][1].text:
        await message.answer(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {model.count_requests()}. "
                             f"\n–í—ã–±–µ—Ä–µ—Ç–µ –∑–∞–ø—Ä–æ—Å",
                             reply_markup=keyboard.list_requests(0))
    elif message.text == keyboard.menu.keyboard[1][0].text:
        await state.clear()
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


@router.callback_query(callbackdata.UsersList.filter(None))
async def manage_access(query: CallbackQuery, callback_data: callbackdata.UsersList):
    if callback_data.type_list == "members":
        await query.message.edit_reply_markup(reply_markup=keyboard.list_users(callback_data.num_page))
    elif callback_data.type_list == "requests":
        await query.message.edit_reply_markup(reply_markup=keyboard.list_requests(callback_data.num_page))
    elif callback_data.type_list == "cancel":
        await query.message.delete()
